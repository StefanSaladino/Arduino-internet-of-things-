// C++ code
//Stefan Saladino
//March 8, 2023
#define NOTE_B0 31
#define NOTE_C1 33
#define NOTE_CS1 35
#define NOTE_D1 37
#define NOTE_DS1 39
#define NOTE_E1 41
#define NOTE_F1 44
#define NOTE_FS1 46
#define NOTE_G1 49
#define NOTE_GS1 52
#define NOTE_A1 55
#define NOTE_AS1 58
#define NOTE_B1 62
#define NOTE_C2 65
#define NOTE_CS2 69
#define NOTE_D2 73
#define NOTE_DS2 78
#define NOTE_E2 82
#define NOTE_F2 87
#define NOTE_FS2 93
#define NOTE_G2 98
#define NOTE_GS2 104
#define NOTE_A2 110
#define NOTE_AS2 117
#define NOTE_B2 123
#define NOTE_C3 131
#define NOTE_CS3 139
#define NOTE_D3 147
#define NOTE_DS3 156
#define NOTE_E3 165
#define NOTE_F3 175
#define NOTE_FS3 185
#define NOTE_G3 196
#define NOTE_GS3 208
#define NOTE_A3 220
#define NOTE_AS3 233
#define NOTE_B3 247
#define NOTE_C4 262
#define NOTE_CS4 277
#define NOTE_D4 294
#define NOTE_DS4 311
#define NOTE_E4 330
#define NOTE_F4 349
#define NOTE_FS4 370
#define NOTE_G4 392
#define NOTE_GS4 415
#define NOTE_A4 440
#define NOTE_AS4 466
#define NOTE_B4 494
#define NOTE_C5 523
#define NOTE_CS5 554
#define NOTE_D5 587
#define NOTE_DS5 622
#define NOTE_E5 659
#define NOTE_F5 698
#define NOTE_FS5 740
#define NOTE_G5 784
#define NOTE_GS5 831
#define NOTE_A5 880
#define NOTE_AS5 932
#define NOTE_B5 988
#define NOTE_C6 1047
#define NOTE_CS6 1109
#define NOTE_D6 1175
#define NOTE_DS6 1245
#define NOTE_E6 1319
#define NOTE_F6 1397
#define NOTE_FS6 1480
#define NOTE_G6 1568
#define NOTE_GS6 1661
#define NOTE_A6 1760
#define NOTE_AS6 1865
#define NOTE_B6 1976
#define NOTE_C7 2093
#define NOTE_CS7 2217
#define NOTE_D7 2349
#define NOTE_DS7 2489
#define NOTE_E7 2637
#define NOTE_F7 2794
#define NOTE_FS7 2960
#define NOTE_G7 3136
#define NOTE_GS7 3322
#define NOTE_A7 3520
#define NOTE_AS7 3729
#define NOTE_B7 3951
#define NOTE_C8 4186
#define NOTE_CS8 4435
#define NOTE_D8 4699
#define NOTE_DS8 4978

int buzzerPin = 5 ; //The buzzerPin is connected to pin 5 of the Arduino.
int button1Pin = 2; //The SW1 button is connect to pin 2 of the Arduino.
//arrays for song 1
int notes[]= {  NOTE_E4, NOTE_G4, NOTE_FS4, NOTE_E4, NOTE_G4, NOTE_FS4, NOTE_E4, NOTE_G4,
  NOTE_FS4, NOTE_D4, NOTE_FS4, NOTE_A4, NOTE_FS4, NOTE_D4, NOTE_FS4, NOTE_A4,
  NOTE_FS4, NOTE_D4, NOTE_FS4, NOTE_A4, NOTE_G4};
int durations[]= {4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 4, 4, 2};
//arrays for song 2
int notes2[]= {NOTE_A3, NOTE_A3, NOTE_A3, NOTE_F3, NOTE_C4, NOTE_A3, NOTE_F3, NOTE_C4,
  NOTE_A3, NOTE_A3, NOTE_A3, NOTE_F3, NOTE_C4, NOTE_A3, NOTE_F3, NOTE_C4,
  NOTE_A3, NOTE_A3, NOTE_A3, NOTE_A3, NOTE_F3, NOTE_G3, NOTE_A3, NOTE_A3,
  NOTE_A3, NOTE_A3, NOTE_A3, NOTE_A3, NOTE_F3, NOTE_G3, NOTE_A3, NOTE_A3,
  NOTE_A3, NOTE_A3, NOTE_A3, NOTE_F3, NOTE_C4, NOTE_A3, NOTE_F3, NOTE_C4,
  NOTE_A3, NOTE_A3, NOTE_A3, NOTE_F3, NOTE_C4, NOTE_A3, NOTE_F3, NOTE_C4,
  NOTE_A3, NOTE_A3, NOTE_A3, NOTE_A3, NOTE_F3, NOTE_G3, NOTE_A3, NOTE_A3,
  NOTE_A3, NOTE_A3, NOTE_A3, NOTE_A3, NOTE_F3, NOTE_G3, NOTE_A3, NOTE_A3};
int durations2[]={ 4, 4, 4, 2, 4, 4, 2, 4,
  4, 4, 4, 2, 4, 4, 2, 4,
  4, 4, 4, 4, 2, 2, 4, 4,
  4, 4, 4, 4, 2, 2, 4, 4,
  4, 4, 4, 2, 4, 4, 2, 4,
  4, 4, 4, 2, 4, 4, 2, 4,
  4, 4, 4, 4, 2, 2, 4, 4,
  4, 4, 4, 4, 2, 2, 4, 4};
//arrays for song 3
int notes3[]={  NOTE_G4, NOTE_G4, NOTE_G4, NOTE_G4, NOTE_G4, NOTE_G4, NOTE_G4,
  NOTE_C5, NOTE_D5, NOTE_C5, NOTE_A4, NOTE_G4,
  NOTE_G4, NOTE_G4, NOTE_G4, NOTE_G4, NOTE_G4, NOTE_G4, NOTE_G4,
  NOTE_C5, NOTE_D5, NOTE_C5, NOTE_A4, NOTE_G4,
  NOTE_G4, NOTE_G4, NOTE_G4, NOTE_G4, NOTE_G4, NOTE_G4, NOTE_G4,
  NOTE_C5, NOTE_D5, NOTE_C5, NOTE_A4, NOTE_G4,
  NOTE_G4, NOTE_G4, NOTE_G4, NOTE_G4, NOTE_G4, NOTE_G4, NOTE_G4,
  NOTE_C5, NOTE_D5, NOTE_C5, NOTE_A4, NOTE_G4
};
int durations3[]={  16, 16, 16, 16, 16, 16, 4,
  16, 16, 16, 16, 4,
  16, 16, 16, 16, 16, 16, 4,
  16, 16, 16, 16, 4,
  16, 16, 16, 16, 16, 16, 4,
  16, 16, 16, 16, 4,
  16, 16, 16, 16, 16, 16, 4,
  16, 16, 16, 16, 4
};
int length= sizeof(notes)/sizeof(int);
int length2= sizeof(notes2)/sizeof(int);
int length3= sizeof(notes3)/sizeof(int);
int i;
int redPin= 9;
int bluePin= 10;
int greenPin= 11;
int data;
int duration;
char incomingByte;
int duration2;
bool tonePlaying=false;
//this is an array of functions
void (*functions[])() = {displayRed, displayPink, displayBlue, displayAqua, displayGreen};


void setup() { //The Setup function runs once.
Serial.begin(9600);
pinMode(buzzerPin, OUTPUT); //Setup red LED pin as an output pin.
pinMode(button1Pin, INPUT);//Setup button1 pin as an input pin.
pinMode(redPin, OUTPUT);
pinMode(bluePin, OUTPUT);
pinMode(greenPin, OUTPUT);
}

//various colour functions for the light show

void displayRed(){
  analogWrite(redPin, 255);
  analogWrite(greenPin, 0);
  analogWrite(bluePin, 0);
}

void displayBlue(){
  analogWrite(redPin, 0);
  analogWrite(greenPin, 0);
  analogWrite(bluePin, 255);}

void displayGreen(){
  analogWrite(redPin, 0);
  analogWrite(greenPin, 255);
  analogWrite(bluePin, 0);}

void displayAqua(){
  analogWrite(redPin, 0);
  analogWrite(greenPin, 255);
  analogWrite(bluePin, 255);}

void displayPink(){
  analogWrite(redPin, 255);
  analogWrite(greenPin, 20);
  analogWrite(bluePin, 147);
}

void lightsOut(){
  analogWrite(redPin, 0);
  analogWrite(greenPin, 0);
  analogWrite(bluePin, 0);}




//code to run first song
void song1(){
  //for loop to cycle through the arrays
  for (int i = 0; i < length; i++) {
      if (digitalRead(button1Pin) == HIGH)//checks if the button has been pressed
     {
       break;//exit the loop
     }
    
    //for this song I decided to display colours based on notes
     if (i==0|| i==3 | i==6){
    displayPink();}
    else if (i==1|| i==4|| i==7|| i==20){
      displayRed();}
    else if (i==2|| i==5|| i==8|| i==10|| i==12|| i==14|| i==16|| i==18){
      displayAqua();}
    else if(i==9|| i==13|| i==17){
      displayBlue();}
    else if(i==11||i==15||i==19){
      displayGreen();}
    
    //setting the duration of each note as well as which note to play based on its place its array
    int duration = 1000 / durations[i];
    tone(5, notes[i], duration);
    delay(duration * 1.30);
    noTone(5);}
  	lightsOut();

}

//code to run second song
void song2(){
  for (int i = 0; i < length2; i++) {
       if (digitalRead(button1Pin) == HIGH)//checks if the button has been pressed
     {
       break;//exit the loop
     }
    //random light show being passed to my array of functions
    int myRandom = random(0,4);
    functions[myRandom]();
    int duration2 = 1000 / durations2[i];
    tone(5, notes2[i], duration2);
    delay(duration2 * 1.30);
    noTone(5);
  	lightsOut();}
}

//code to run the third song
void song3(){
    for (int i = 0; i < length3; i++) {
     if (digitalRead(button1Pin) == HIGH)//checks if the button has been pressed
     {
       break;//exit the loop
     }
    int myRandom = random(0,4);
    functions[myRandom]();
    int duration3 = 1000 / durations3[i];
    tone(5, notes3[i], duration3);
    delay(duration3 * 1.30);
    noTone(5);
    lightsOut();}
}
  	//lightsOut();}
//}

//prompts user to input which song they'd liked to play (1/2/3)
/*you can note that the menu contains the functions created for 
each song*/
void runMenu(){
  Serial.println(" ");
  Serial.println("Input song selection: ");
  Serial.println("1. 50 Cent- in da club");
  Serial.println("2. Avicii- Wake me up");
  Serial.println("3. RATM- Bulls on parade");
  Serial.print("Waiting for user selection.");
 
  
  while(Serial.available()==0) {
    Serial.print(".");
    delay(1000);
  }
  
  //accepting user input
  incomingByte=Serial.read();
  
 //based on user input will play a particular song, or let the user know their input is invalid 
 switch (incomingByte){
 case '1':{
    song1();
 	break;}
  
 case '2':{
  song2();
  break;}
  
 case '3': {
   song3();
   break;}
  
 default:{
   Serial.println(" ");
   Serial.println(" ");
   Serial.println("Invalid Selection");
   runMenu();
   break;}
  }
    
  
  
  

}


  
void loop() { //The loop function runs forever.
data= map(data, 0, 1023, 0, 255); 
  runMenu();
}
